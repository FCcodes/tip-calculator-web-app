import Head from "next/head";
import Image from "next/image";

//react
import { useState, useEffect } from "react";

//mui
import {
  Box,
  Grid,
  Typography,
  Button,
  TextField,
  FormControl,
  Input,
  InputLabel,
  InputAdornment,
  ButtonGroup,
  FormHelperText,
  getTouchRippleUtilityClass,
} from "@mui/material";

//svg icons
import dollarIcon from "../assets/svg/icon-dollar.svg";
import personIcon from "../assets/svg/icon-person.svg";
import logoIcon from "../assets/svg/logo.svg";
import { fontWeight } from "@mui/system";

export default function Home() {
  const [tipCalState, setTipCalState] = useState({
    bill: 0,
    tip: 0,
    NOP: 1,
    billError: false,
    tipError: false,
    NOPError: false,
  });

  const [total, setTotal] = useState({
    total: 0,
    tipAmount: 0,
  });

  function setTip(tipp) {   
    
    if (isNaN(parseInt(tipp))) {
      console.log(parseInt(tipp) )
      setTipCalState((prev) => ({
        ...prev,
        tipError: true,
      }));

      return
    }
 
    setTipCalState((prev) => ({
      ...prev,
      tipError: false,
    }));


    if(tipp === ""){

      setTipCalState((prev)=>({
        ...prev,
        tip: 0,
      }))

      return
    }

    setTipCalState((prev) => {
      return {
        ...prev,
        tipError: false,
        tip: parseInt(tipp),
      };
    });

    return;
  }

  function setBill(billl) {
    
    console.log(billl)

    if(billl === ""){

      setTipCalState((prev)=>({
        ...prev,
        billl: 0,
      }))

      return
    }
    
    if (isNaN(parseInt(billl))) {
      setTipCalState((prev) => ({
        ...prev,
        billError: true,
      }));

      return
    }
  
    setTipCalState((prev) => {
      return {
        ...prev,
        billError: false,
        bill: parseInt(billl),
      };
    });

    return;
  }

  function setPersons(persons) {

    console.log(isNaN(parseInt(persons)))

    if (isNaN(parseInt(persons))) {      
      setTipCalState((prev) => ({
        ...prev,
        NOPError: true,
      }));

      return
    }

    setTipCalState((prev) => {
      return {
        ...prev,
        NOPError: false,
        NOP: parseInt(persons),
      };
    });

    return;
  }

  useEffect(() => {
    
      let tipAmount = (tipCalState.tip / 100) * tipCalState.bill;
     

      setTotal({
        total: parseInt(tipAmount) + parseInt(tipCalState.bill),
        tipAmount,
      });
    
  }, [tipCalState]);

  return (
    <>
      <Head>
        <title>Tip Calculator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box component="div" className="home-container">
        <Typography
          variant="h1"
          sx={{ fontSize: "2rem", fontWeight: 300, letterSpacing: "1rem" }}
        >
          SPLITTER
        </Typography>

        <Grid
          container
          sx={{
            mt: 3,
            p: 2,
            width: {phone: '100%', tablet: '50%', laptop: '40%'},
            backgroundColor: "white",
            borderRadius: "10px",
          }}
        >
          <Grid item phone={12} laptop={6} sx={{ p: 2 }}>
            <FormControl sx={{ mb: 3, width: "100%" }}>
              <Typography
                variant="h2"
                sx={{ mb: 1, fontWeight: 800, color: "grey.500" }}
              >
                Bill
              </Typography>

              <Input
                sx={{
                  pl: 1,
                  backgroundColor: "rgb(243,248,251)",
                  borderRadius: "5px",
                  fontWeight: 800,
                  color: "grey.600",
                }}
                inputProps={{
                  min: 0,
                }}
                value={tipCalState.bill}
                onChange={(e) => setBill(e.target.value)}
                type="number"
                fullWidth={true}
                required={true}
                error={tipCalState.billError}
                disableUnderline={tipCalState.billError ? false : true}
                startAdornment={
                  <InputAdornment position="start">
                    <Image src={dollarIcon} alt="" />
                  </InputAdornment>
                }
              />
              <FormHelperText error={tipCalState.billError} sx={{ fontSize: ".5rem" }}>
                {tipCalState.billError? "Invalid Input": " "}
              </FormHelperText>

            </FormControl>

            <Typography
              variant="h2"
              sx={{
                mb: 1,
                fontWeight: 800,
                color: "grey.500",
              }}
            >
              Select Tip %
            </Typography>

            <Box
              component="div"
              className="tips"
              sx={{
                mb: 3,
                display: "flex",
                flexWrap: "wrap",
                alignItems: "baseline",
              }}
            >
              <Box
                component="button"
                sx={{
                  mr: 1,
                  mb: 1,
                  padding: ".5rem 1.5rem",
                  border: "none",
                  borderRadius: "5px",
                  fontWeight: 600,
                  fontSize: '.7rem',
                  fontSize: '.7rem',
                  color: "rgb(185,219,221)",
                  backgroundColor: "rgb(0,71,74)",
                  width: "30%",
                }}
                onClick={() => setTip(5)}
              >
                5
              </Box>

              <Box
                component="button"
                sx={{
                  mr: 1,
                  mb: 1,
                  padding: ".5rem 1.5rem",
                  border: "none",
                  borderRadius: "5px",
                  fontWeight: 600,
                  fontSize: '.7rem',
                  color: "rgb(185,219,221)",
                  backgroundColor: "rgb(0,71,74)",
                  width: "30%",
                }}
                onClick={() => setTip(10)}
              >
                10
              </Box>

              <Box
                component="button"
                sx={{
                  mb: 1,
                  padding: ".5rem 1.5rem",
                  border: "none",
                  borderRadius: "5px",
                  fontWeight: 600,
                  fontSize: '.7rem',
                  color: "rgb(185,219,221)",
                  backgroundColor: "rgb(0,71,74)",
                  width: "30%",
                }}
                onClick={() => setTip(15)}
              >
                15
              </Box>

              <Box
                component="button"
                sx={{
                  mr: 1,
                  padding: ".5rem 1.5rem",
                  border: "none",
                  borderRadius: "5px",
                  fontWeight: 600,
                  fontSize: '.7rem',
                  color: "rgb(185,219,221)",
                  backgroundColor: "rgb(0,71,74)",
                  width: "30%",
                }}
                onClick={() => setTip(25)}
              >
                25
              </Box>

              <Box
                component="button"
                sx={{
                  mr: 1,
                  padding: ".5rem 1.5rem",
                  border: "none",
                  borderRadius: "5px",
                  fontWeight: 600,
                  fontSize: '.7rem',
                  color: "rgb(185,219,221)",
                  backgroundColor: "rgb(0,71,74)",
                  width: "30%",
                }}
                onClick={() => setTip(50)}
              >
                50
              </Box>

              <FormControl
                sx={{
                  width: "30%",
                }}
              >
                <Input
                  type="number"
                  error={tipCalState.tipError}
                  disableUnderline={tipCalState.tipError ? false : true}
                  value={tipCalState.tip}
                  inputProps={{
                    min: 0,
                    max: 100,
                  }}
                  sx={{
                    padding: ".1rem .5rem",
                    borderRadius: "5px",
                    backgroundColor: "rgb(243,248,251)",
                    width: "100%",
                    color: "grey.600",
                    fontWeight: 800,
                  }}
                  onChange={(e) => setTip(e.target.value)}
                />
                <FormHelperText error={tipCalState.tipError} sx={{ fontSize: ".5rem" }}>
                  {tipCalState.tipError ? "Invalid Input" : ""}
                </FormHelperText>
              </FormControl>
            </Box>

            <Typography
              variant="h2"
              sx={{ mb: 1, fontWeight: 800, color: "grey.500" }}
            >
              Number of People
            </Typography>

            <FormControl sx={{ width: "100%" }}>
              <Input
                sx={{
                  pl: 1,
                  backgroundColor: "rgb(243,248,251)",
                  borderRadius: "5px",
                  fontWeight: 800,
                  color: "grey600",
                }}
                inputProps={{
                  min: 1,
                }}
                value={tipCalState.NOP}
                type="number"
                fullWidth={true}
                required={true}
                error={tipCalState.NOPError}
                disableUnderline={tipCalState.NOPError ? false : true}
                onChange={(e) => setPersons(e.target.value)}
                startAdornment={
                  <InputAdornment posistion="start" sx={{ mr: 1 }}>
                    <Image src={personIcon} alt="" />
                  </InputAdornment>
                }
              />
              <FormHelperText
                error={true}
                sx={{ ml: 0, mt: 1, fontSize: '.5rem' }}
              >
                {tipCalState.NOPError ? "Invalid Input" : ""}
              </FormHelperText>
            </FormControl>
          </Grid>

          <Grid
            item
            phone={12}
            laptop={6}
            sx={{
              p: 2,
              py: 4,
              backgroundColor: "rgb(0,71,75)",
              borderRadius: "10px",
              position: "relative",
            }}
          >
            <Box
              className="tip-amount"
              sx={{ mb: 3, display: "flex", justifyContent: "space-between" }}
            >
              <Box className="label">
                <Typography
                  variant="h2"
                  sx={{ color: "grey.100", fontWeight: 700 }}
                >
                  Tip Amount
                </Typography>
                <Typography variant="subtitle2" sx={{ color: "grey.400" }}>
                  / person
                </Typography>
              </Box>

              <Typography
                variant="body2"
                sx={{ color: "rgb(40,174,159)", fontWeight: 600 }}
              >
                { `$ ${total.tipAmount.toFixed(2)}` }
              </Typography>
            </Box>

            <Box
              className="total-amount"
              sx={{ mb: 3, display: "flex", justifyContent: "space-between" }}
            >
              <Box className="label">
                <Typography
                  variant="h2"
                  sx={{ color: "grey.100", fontWeight: 700 }}
                >
                  Total
                </Typography>
                <Typography variant="subtitle2" sx={{ color: "grey.400" }}>
                  / person
                </Typography>
              </Box>

              <Typography
                variant="body2"
                sx={{ color: "rgb(40,174,159)", fontWeight: 600 }}
              >
                { `$ ${total.total.toFixed(2)}` }
              </Typography>
            </Box>

            <Button
              variant="contained"
              disableElevation={true}
              fullWidth={true}
              sx={{
                display: "block",
               
              }}
              onClick={()=> reset()}
            >
              Reset
            </Button>
          </Grid>
        </Grid>
      </Box>
    </>
  );
}
